const text = 
{
    english: 
    {
        by: "by",
        version: "Version",
        documentation: "Documentation",
        commands: "Commands",
        clockspeed: "Clock Speed",
        accumulator: "Accumulator",
        programcounter: "Program Counter",
        usecache: "Use Cache",
        usepipeline: "Use Pipeline",
        curcode: "Code",
        loadtoram: "Load Current code to RAM",
        runcode: "Run Code",
        ramname: "Random Access Memory (RAM)",
        cpuname: "Central Processing Unit",
        commandlist: "Command List",
        name: "Name",
        value: "Value",
        clear: "Clear",
        input: "Input",
        output: "Output",
        cacheconsole: "Cache Console",
        commandname: "Command Name",
        syntax: "Syntax",
        description: "Description",
        codeplaceholder: "Code goes here...",
        nocache: "There is no Cache",
        custom: "Custom",
        addtwonum: "Add Two Numbers",
        sortthree: "Sort Three Numbers",
        countdown: "Countdown Timer",
        inputplaceholder: "Input: 1 2 3 ...",
        fetch: "Fetching",
        decode: "Decoding",
        execute: "Executing",
        updatecache: "Updating Cache",
        invalidinputs: "Invalid value in input",
        missinghalt: "Error: Accessing variable as instruction, missing halt",
        executiontime: (start, finish) => { return `Execution time: ${(finish - start)/1000} seconds`; },
        consolebranch: (newPos) => { return `Jumping to position: ${newPos}`; },
        consoleignorebrp: () => { return "Ignoring BRP"; },
        consoleignorebrz: () => { return "Ignoring BRZ"; },
        consoleinput: (input) => { return `Getting input: ${input}`; },
        consoleoutput: (output) => { return `Writing output: ${output}` },
        consolehalt: () => { return "Ending program"; },
        consoleadd: (value) => { return `Adding ${value} to accumulator`; },
        consolesub: (value) => { return `Subtracting ${value} from accumulator`; },
        consolesta: (p, value) => { return `Storing at: ${p} value: ${value}`; },
        consolelda: (p) => { return `Loading from: ${p} to the accumulator`; },
        cachehit: (address) => { return `Cache hit on address: ${address}`; },
        cachemiss: (address) => { return `Cache miss on address: ${address}`; }
    },
    portuguese: 
    {
        by: "por",
        version: "Versão",
        documentation: "Documentação",
        commands: "Comandos",
        clockspeed: "Velocidade de Clock",
        accumulator: "Acumulador",
        programcounter: "Contador",
        usecache: "Usar Cache",
        usepipeline: "Usar Pipeline",
        curcode: "Código",
        loadtoram: "Carregar código atual para a RAM",
        runcode: "Executar Código",
        ramname: "Memória de Acesso Aleatório (RAM)",
        cpuname: "Unidade central de processamento",
        commandlist: "Lista de comandos",
        name: "Nome",
        value: "Valor",
        clear: "Limpar",
        input: "Entrada",
        output: "Saída",
        cacheconsole: "Console do Cache",
        commandname: "Nome",
        syntax: "Sintaxe",
        description: "Descrição",
        codeplaceholder: "Escreva o código aqui...",
        nocache: "Não possui Cache",
        custom: "Customizado",
        addtwonum: "Adicionar Dois Números",
        sortthree: "Organizar Três Números",
        countdown: "Temporizador",
        inputplaceholder: "Entrada: 1 2 3 ...",
        fetch: "Resgatando",
        decode: "Decodificando",
        execute: "Executando",
        updatecache: "Atualizando Cache",
        invalidinputs: "Valor indevido na entrada",
        missinghalt: "Erro: Acessando variável como instrução, faltando halt",
        executiontime: (start, finish) => { return `Tempo de execução: ${(finish - start)/1000} segundos`; },
        consolebranch: (newPos) => { return `Pulando para posição: ${newPos}`; },
        consoleignorebrp: () => { return "Ignorando BRP"; },
        consoleignorebrz: () => { return "Ignorando BRZ"; },
        consoleinput: (input) => { return `Obtendo entrada: ${input}`; },
        consoleoutput: (output) => { return `Escrevendo saída: ${output}`; },
        consolehalt: () => { return "Encerrando programa"; },
        consoleadd: (value) => { return `Adicionando ${value} ao acumulador`; },
        consolesub: (value) => { return `Subtraindo ${value} do acumulador`; },
        consolesta: (p, value) => { return `Guardando em: ${p} valor: ${value}`; },
        consolelda: (p) => { return `Carregando de: ${p} para o acumulador`; },
        cachehit: (address) => { return `Acerto de cache no endereço: ${address}`; },
        cachemiss: (address) => { return `Falha de cache no endereço: ${address}`; }
    }
}